import numpy as np
# import datagenerator


def sided():  # snub icosidodecadodecahedron
    C0 = 0.105398765906697216676314189282
    C1 = 0.139623637868037118589881535187
    C2 = 0.184961940339626297836961737414
    C3 = 0.245022403774734335266195724469
    C4 = 0.410877732043017261285800591418
    C5 = 0.438898343962682737883306417824
    C6 = 0.525190497798036582742263736641
    C7 = 0.544297109869379954559620607106
    C8 = 0.581416517652346986253630835588
    C9 = 0.695729283407366307710093980810
    C10 = 0.770212901572770918008459461110
    C11 = 0.835352921275403426299975515997
    C12 = 0.955174841912397215845421198524
    C13 = 1.02031486161502972413693725341
    C14 = 1.10660701545038356899589457223

    # tablica V zawiera współrzędne wierzchołków snub icosidodecadodecahedron'a

    V = np.zeros((60, 3))
    V[0] = (C0, -C2, C14)
    V[1] = (C0, C2, -C14)
    V[2] = (-C0, C2, C14)
    V[3] = (-C0, -C2, -C14)
    V[4] = (C14, -C0, C2)
    V[5] = (C14, C0, -C2)
    V[6] = (-C14, C0, C2)
    V[7] = (-C14, -C0, -C2)
    V[8] = (C2, -C14, C0)
    V[9] = (C2, C14, -C0)
    V[10] = (-C2, C14, C0)
    V[11] = (-C2, -C14, -C0)
    V[12] = (C3, C4, C13)
    V[13] = (C3, -C4, -C13)
    V[14] = (-C3, -C4, C13)
    V[15] = (-C3, C4, -C13)
    V[16] = (C13, C3, C4)
    V[17] = (C13, -C3, -C4)
    V[18] = (-C13, -C3, C4)
    V[19] = (-C13, C3, -C4)
    V[20] = (C4, C13, C3)
    V[21] = (C4, -C13, -C3)
    V[22] = (-C4, -C13, C3)
    V[23] = (-C4, C13, -C3)
    V[24] = (C1, -C8, C12)
    V[25] = (C1, C8, -C12)
    V[26] = (-C1, C8, C12)
    V[27] = (-C1, -C8, -C12)
    V[28] = (C12, -C1, C8)
    V[29] = (C12, C1, -C8)
    V[30] = (-C12, C1, C8)
    V[31] = (-C12, -C1, -C8)
    V[32] = (C8, -C12, C1)
    V[33] = (C8, C12, -C1)
    V[34] = (-C8, C12, C1)
    V[35] = (-C8, -C12, -C1)
    V[36] = (C7, -C6, C11)
    V[37] = (C7, C6, -C11)
    V[38] = (-C7, C6, C11)
    V[39] = (-C7, -C6, -C11)
    V[40] = (C11, -C7, C6)
    V[41] = (C11, C7, -C6)
    V[42] = (-C11, C7, C6)
    V[43] = (-C11, -C7, -C6)
    V[44] = (C6, -C11, C7)
    V[45] = (C6, C11, -C7)
    V[46] = (-C6, C11, C7)
    V[47] = (-C6, -C11, -C7)
    V[48] = (C5, C9, C10)
    V[49] = (C5, -C9, -C10)
    V[50] = (-C5, -C9, C10)
    V[51] = (-C5, C9, -C10)
    V[52] = (C10, C5, C9)
    V[53] = (C10, -C5, -C9)
    V[54] = (-C10, -C5, C9)
    V[55] = (-C10, C5, -C9)
    V[56] = (C9, C10, C5)
    V[57] = (C9, -C10, -C5)
    V[58] = (-C9, -C10, C5)
    V[59] = (-C9, C10, -C5)
    
    # pentagram jest tablicą 12 pentagramów
    pentagram = np.zeros((12, 5, 3))
    pentagram[0] = [V[0], V[52], V[36], V[12], V[28]]
    pentagram[1] = [V[1], V[53], V[37], V[13], V[29]]
    pentagram[2] = [V[2], V[54], V[38], V[14], V[30]]
    pentagram[3] = [V[3], V[55], V[39], V[15], V[31]]
    pentagram[4] = [V[4], V[57], V[40], V[17], V[32]]
    pentagram[5] = [V[5], V[56], V[41], V[16], V[33]]
    pentagram[6] = [V[6], V[59], V[42], V[19], V[34]]
    pentagram[7] = [V[7], V[58], V[43], V[18], V[35]]
    pentagram[8] = [V[8], V[50], V[44], V[22], V[24]]
    pentagram[9] = [V[9], V[51], V[45], V[23], V[25]]
    pentagram[10] = [V[10], V[48], V[46], V[20], V[26]]
    pentagram[11] = [V[11], V[49], V[47], V[21], V[27]]

    # pentagon jest tablicą 12 pentagonów
    pentagon = np.zeros((12, 5, 3))
    pentagon[0] = [V[0], V[54], V[35], V[21], V[40]]
    pentagon[1] = [V[1], V[55], V[34], V[20], V[41]]
    pentagon[2] = [V[2], V[52], V[33], V[23], V[42]]
    pentagon[3] = [V[3], V[53], V[32], V[22], V[43]]
    pentagon[4] = [V[4], V[56], V[26], V[14], V[44]]
    pentagon[5] = [V[5], V[57], V[27], V[15], V[45]]
    pentagon[6] = [V[6], V[58], V[24], V[12], V[46]]
    pentagon[7] = [V[7], V[59], V[25], V[13], V[47]]
    pentagon[8] = [V[8], V[49], V[29], V[16], V[36]]
    pentagon[9] = [V[9], V[48], V[28], V[17], V[37]]
    pentagon[10] = [V[10], V[51], V[31], V[18], V[38]]
    pentagon[11] = [V[11], V[50], V[30], V[19], V[39]]

    # triangle jest tablicą 80 trójkątów
    triangle = np.zeros((80, 3, 3))
    triangle[0] = [V[0], V[28], V[48]]
    triangle[1] = [V[1], V[29], V[49]]
    triangle[2] = [V[2], V[30], V[50]]
    triangle[3] = [V[3], V[31], V[51]]
    triangle[4] = [V[4], V[32], V[53]]
    triangle[5] = [V[5], V[33], V[52]]
    triangle[6] = [V[6], V[34], V[55]]
    triangle[7] = [V[7], V[35], V[54]]
    triangle[8] = [V[8], V[24], V[58]]
    triangle[9] = [V[9], V[25], V[59]]
    triangle[10] = [V[10], V[26], V[56]]
    triangle[11] = [V[11], V[27], V[57]]
    triangle[12] = [V[12], V[20], V[46]]
    triangle[13] = [V[13], V[21], V[47]]
    triangle[14] = [V[14], V[22], V[44]]
    triangle[15] = [V[15], V[23], V[45]]
    triangle[16] = [V[16], V[12], V[36]]
    triangle[17] = [V[17], V[13], V[37]]
    triangle[18] = [V[18], V[14], V[38]]
    triangle[19] = [V[19], V[15], V[39]]
    triangle[20] = [V[20], V[16], V[41]]
    triangle[21] = [V[21], V[17], V[40]]
    triangle[22] = [V[22], V[18], V[43]]
    triangle[23] = [V[23], V[19], V[42]]
    triangle[24] = [V[24], V[28], V[12]]
    triangle[25] = [V[25], V[29], V[13]]
    triangle[26] = [V[26], V[30], V[14]]
    triangle[27] = [V[27], V[31], V[15]]
    triangle[28] = [V[28], V[32], V[17]]
    triangle[29] = [V[29], V[33], V[16]]
    triangle[30] = [V[30], V[34], V[19]]
    triangle[31] = [V[31], V[35], V[18]]
    triangle[32] = [V[32], V[24], V[22]]
    triangle[33] = [V[33], V[25], V[23]]
    triangle[34] = [V[34], V[26], V[20]]
    triangle[35] = [V[35], V[27], V[21]]
    triangle[36] = [V[36], V[50], V[8]]
    triangle[37] = [V[37], V[51], V[9]]
    triangle[38] = [V[38], V[48], V[10]]
    triangle[39] = [V[39], V[49], V[11]]
    triangle[40] = [V[40], V[52], V[0]]
    triangle[41] = [V[41], V[53], V[1]]
    triangle[42] = [V[42], V[54], V[2]]
    triangle[43] = [V[43], V[55], V[3]]
    triangle[44] = [V[44], V[57], V[4]]
    triangle[45] = [V[45], V[56], V[5]]
    triangle[46] = [V[46], V[59], V[6]]
    triangle[47] = [V[47], V[58], V[7]]
    triangle[48] = [V[48], V[9], V[46]]
    triangle[49] = [V[49], V[8], V[47]]
    triangle[50] = [V[50], V[11], V[44]]
    triangle[51] = [V[51], V[10], V[45]]
    triangle[52] = [V[52], V[2], V[36]]
    triangle[53] = [V[53], V[3], V[37]]
    triangle[54] = [V[54], V[0], V[38]]
    triangle[55] = [V[55], V[1], V[39]]
    triangle[56] = [V[56], V[4], V[41]]
    triangle[57] = [V[57], V[5], V[40]]
    triangle[58] = [V[58], V[6], V[43]]
    triangle[59] = [V[59], V[7], V[42]]
    triangle[60] = [V[0], V[48], V[38]]
    triangle[61] = [V[1], V[49], V[39]]
    triangle[62] = [V[2], V[50], V[36]]
    triangle[63] = [V[3], V[51], V[37]]
    triangle[64] = [V[4], V[53], V[41]]
    triangle[65] = [V[5], V[52], V[40]]
    triangle[66] = [V[6], V[55], V[43]]
    triangle[67] = [V[7], V[54], V[42]]
    triangle[68] = [V[8], V[58], V[47]]
    triangle[69] = [V[9], V[59], V[46]]
    triangle[70] = [V[10], V[56], V[45]]
    triangle[71] = [V[11], V[57], V[44]]
    triangle[72] = [V[12], V[16], V[20]]
    triangle[73] = [V[13], V[17], V[21]]
    triangle[74] = [V[14], V[18], V[22]]
    triangle[75] = [V[15], V[19], V[23]]
    triangle[76] = [V[24], V[32], V[28]]
    triangle[77] = [V[25], V[33], V[29]]
    triangle[78] = [V[26], V[34], V[30]]
    triangle[79] = [V[27], V[35], V[31]]

    # fcs = datagenerator.faces
    # triangle = fcs[0]
    # pentagon = fcs[2]
    # pentagram = fcs[6]
    # print('pentagram shape = ', np.shape(pentagram))
    # triangle = np.reshape(triangle, (80, 3, 3))
    # pentagram = np.reshape(pentagram, (12, 5, 3))
    # pentagon = np.reshape(pentagon, (12, 5, 3))
    face = [triangle, pentagon, pentagram]
    return face


def gosid():  # Great Snub Icosidodecahedron
    C0 = 0.0812642829572718262058790219454
    C1 = 0.113690409611386992694315866713
    C2 = 0.125868396751318911853846136829
    C3 = 0.239558806362705904548162003542
    C4 = 0.257356768647573545542485428757
    C5 = 0.284923627010362671688163165899
    C6 = 0.335147715949345479170923435882
    C7 = 0.371047178258960538236801295470
    C8 = 0.468878573956484550146522281604
    C9 = 0.519102662895467357629282551587
    C10 = 0.574706522312051383719085439424
    C11 = 0.644971059646786269483128688416
    C12 = 0.655970805269323209924964461370
    C13 = 0.726235342604058095689007710362
    C14 = 0.804026289905830029317445717487

    # C0  = square-root of a root of the polynomial:
    #     4096*(x^6] + 3072*(x^5] - 3584*(x^4] - 2048*(x^3] + 1312*(x^2] - 160*x + 1
    # C1  = square-root of a root of the polynomial:
    #     4096*(x^6] - 13312*(x^5] + 9216*(x^4] - 9472*(x^3] + 1872*(x^2] - 100*x + 1
    # C2  = square-root of a root of the polynomial:
    #     4096*(x^6] - 8192*(x^5] + 1792*(x^4] - 7488*(x^3] + 3456*(x^2] - 116*x + 1
    # C3  = square-root of a root of the polynomial:
    #     4096*(x^6] - 15360*(x^5] + 18944*(x^4] - 7168*(x^3] + 1024*(x^2] - 56*x + 1
    # C4  = square-root of a root of the polynomial:
    #     4096*(x^6] - 19456*(x^5] + 14592*(x^4] - 4736*(x^3] + 752*(x^2] - 48*x + 1
    # C5  = square-root of a root of the polynomial:
    #     4096*(x^6] - 12288*(x^5] - 768*(x^4] + 384*(x^3] + 272*(x^2] - 36*x + 1
    # C6  = square-root of a root of the polynomial:
    #     4096*(x^6] + 6144*(x^5] + 4352*(x^4] - 3456*(x^3] + 672*(x^2] - 48*x + 1
    # C7  = square-root of a root of the polynomial:
    #     4096*(x^6] - 12288*(x^5] + 15872*(x^4] - 6016*(x^3] + 912*(x^2] - 56*x + 1
    # C8  = square-root of a root of the polynomial:
    #     4096*(x^6] - 1024*(x^5] + 4096*(x^4] - 4672*(x^3] + 1392*(x^2] - 128*x + 1
    # C9  = square-root of a root of the polynomial:
    #     4096*(x^6] - 5120*(x^5] + 9472*(x^4] - 5888*(x^3] + 1216*(x^2] - 68*x + 1
    # C10 = square-root of a root of the polynomial:
    #     4096*(x^6] - 3072*(x^5] + 9728*(x^4] - 8960*(x^3] + 2944*(x^2] - 328*x + 1
    # C11 = square-root of a root of the polynomial:
    #     4096*(x^6] - 21504*(x^5] + 16384*(x^4] - 4672*(x^3] + 624*(x^2] - 40*x + 1
    # C12 = square-root of a root of the polynomial:  4096*(x^6] - 18432*(x^5]
    #     + 29184*(x^4] - 20160*(x^3] + 5728*(x^2] - 488*x + 1
    # C13 = square-root of a root of the polynomial:
    #     4096*(x^6] - 9728*(x^4] - 3072*(x^3] + 4256*(x^2] - 132*x + 1
    # C14 = square-root of a root of the polynomial:  4096*(x^6] - 17408*(x^5]
    #     + 28672*(x^4] - 21696*(x^3] + 6672*(x^2] - 416*x + 1

    V0 = [-C7, C6, -C11]
    V1 = [C7, C6, C11]
    V2 = [C7, -C6, -C11]
    V3 = [-C7, -C6, C11]
    V4 = [C6, -C11, -C7]
    V5 = [-C6, -C11, C7]
    V6 = [-C6, C11, -C7]
    V7 = [C6, C11, C7]
    V8 = [-C11, -C7, C6]
    V9 = [C11, -C7, -C6]
    V10 = [C11, C7, C6]
    V11 = [-C11, C7, -C6]
    V12 = [C9, C10, -C4]
    V13 = [-C9, C10, C4]
    V14 = [-C9, -C10, -C4]
    V15 = [C9, -C10, C4]
    V16 = [-C10, -C4, -C9]
    V17 = [C10, -C4, C9]
    V18 = [C10, C4, -C9]
    V19 = [-C10, C4, C9]
    V20 = [C4, -C9, C10]
    V21 = [-C4, -C9, -C10]
    V22 = [-C4, C9, C10]
    V23 = [C4, C9, -C10]
    V24 = [-C13, C3, C5]
    V25 = [C13, C3, -C5]
    V26 = [C13, -C3, C5]
    V27 = [-C13, -C3, -C5]
    V28 = [C3, C5, -C13]
    V29 = [-C3, C5, C13]
    V30 = [-C3, -C5, -C13]
    V31 = [C3, -C5, C13]
    V32 = [C5, -C13, C3]
    V33 = [-C5, -C13, -C3]
    V34 = [-C5, C13, C3]
    V35 = [C5, C13, -C3]
    V36 = [C0, C14, C1]
    V37 = [-C0, C14, -C1]
    V38 = [-C0, -C14, C1]
    V39 = [C0, -C14, -C1]
    V40 = [C14, C1, C0]
    V41 = [-C14, C1, -C0]
    V42 = [-C14, -C1, C0]
    V43 = [C14, -C1, -C0]
    V44 = [C1, C0, C14]
    V45 = [-C1, C0, -C14]
    V46 = [-C1, -C0, C14]
    V47 = [C1, -C0, -C14]
    V48 = [-C8, C12, -C2]
    V49 = [C8, C12, C2]
    V50 = [C8, -C12, -C2]
    V51 = [-C8, -C12, C2]
    V52 = [-C12, -C2, C8]
    V53 = [C12, -C2, -C8]
    V54 = [C12, C2, C8]
    V55 = [-C12, C2, -C8]
    V56 = [C2, C8, C12]
    V57 = [-C2, C8, -C12]
    V58 = [-C2, -C8, C12]
    V59 = [C2, -C8, -C12]

    # Faces:
    pentagram = np.zeros((12, 5, 3))
    pentagram[0] = [V0, V36, V28, V48, V12]
    pentagram[1] = [V1, V37, V29, V49, V13]
    pentagram[2] = [V2, V38, V30, V50, V14]
    pentagram[3] = [V3, V39, V31, V51, V15]
    pentagram[4] = [V4, V40, V32, V53, V17]
    pentagram[5] = [V5, V41, V33, V52, V16]
    pentagram[6] = [V6, V42, V34, V55, V19]
    pentagram[7] = [V7, V43, V35, V54, V18]
    pentagram[8] = [V8, V44, V24, V58, V22]
    pentagram[9] = [V9, V45, V25, V59, V23]
    pentagram[10] = [V10, V46, V26, V56, V20]
    pentagram[11] = [V11, V47, V27, V57, V21]

    triangle = np.zeros((80, 3, 3))
    triangle[0] = [V0, V2, V14]
    triangle[1] = [V1, V3, V15]
    triangle[2] = [V2, V0, V12]
    triangle[3] = [V3, V1, V13]
    triangle[4] = [V4, V5, V16]
    triangle[5] = [V5, V4, V17]
    triangle[6] = [V6, V7, V18]
    triangle[7] = [V7, V6, V19]
    triangle[8] = [V8, V11, V21]
    triangle[9] = [V9, V10, V20]
    triangle[10] = [V10, V9, V23]
    triangle[11] = [V11, V8, V22]
    triangle[12] = [V12, V48, V56]
    triangle[13] = [V13, V49, V57]
    triangle[14] = [V14, V50, V58]
    triangle[15] = [V15, V51, V59]
    triangle[16] = [V16, V52, V48]
    triangle[17] = [V17, V53, V49]
    triangle[18] = [V18, V54, V50]
    triangle[19] = [V19, V55, V51]
    triangle[20] = [V20, V56, V52]
    triangle[21] = [V21, V57, V53]
    triangle[22] = [V22, V58, V54]
    triangle[23] = [V23, V59, V55]
    triangle[24] = [V24, V44, V36]
    triangle[25] = [V25, V45, V37]
    triangle[26] = [V26, V46, V38]
    triangle[27] = [V27, V47, V39]
    triangle[28] = [V28, V36, V40]
    triangle[29] = [V29, V37, V41]
    triangle[30] = [V30, V38, V42]
    triangle[31] = [V31, V39, V43]
    triangle[32] = [V32, V40, V44]
    triangle[33] = [V33, V41, V45]
    triangle[34] = [V34, V42, V46]
    triangle[35] = [V35, V43, V47]
    triangle[36] = [V36, V0, V24]
    triangle[37] = [V37, V1, V25]
    triangle[38] = [V38, V2, V26]
    triangle[39] = [V39, V3, V27]
    triangle[40] = [V40, V4, V28]
    triangle[41] = [V41, V5, V29]
    triangle[42] = [V42, V6, V30]
    triangle[43] = [V43, V7, V31]
    triangle[44] = [V44, V8, V32]
    triangle[45] = [V45, V9, V33]
    triangle[46] = [V46, V10, V34]
    triangle[47] = [V47, V11, V35]
    triangle[48] = [V48, V28, V16]
    triangle[49] = [V49, V29, V17]
    triangle[50] = [V50, V30, V18]
    triangle[51] = [V51, V31, V19]
    triangle[52] = [V52, V33, V20]
    triangle[53] = [V53, V32, V21]
    triangle[54] = [V54, V35, V22]
    triangle[55] = [V55, V34, V23]
    triangle[56] = [V56, V26, V12]
    triangle[57] = [V57, V27, V13]
    triangle[58] = [V58, V24, V14]
    triangle[59] = [V59, V25, V15]
    triangle[60] = [V24, V0, V14]
    triangle[61] = [V25, V1, V15]
    triangle[62] = [V26, V2, V12]
    triangle[63] = [V27, V3, V13]
    triangle[64] = [V28, V4, V16]
    triangle[65] = [V29, V5, V17]
    triangle[66] = [V30, V6, V18]
    triangle[67] = [V31, V7, V19]
    triangle[68] = [V32, V8, V21]
    triangle[69] = [V33, V9, V20]
    triangle[70] = [V34, V10, V23]
    triangle[71] = [V35, V11, V22]
    triangle[72] = [V36, V44, V40]
    triangle[73] = [V37, V45, V41]
    triangle[74] = [V38, V46, V42]
    triangle[75] = [V39, V47, V43]
    triangle[76] = [V48, V52, V56]
    triangle[77] = [V49, V53, V57]
    triangle[78] = [V50, V54, V58]
    triangle[79] = [V51, V55, V59]

    face = [triangle, pentagram]
    return face


def gaquatid():
    # GreatTruncated Icosidodecahedron

    C0 = 0.07294901687515772769311974845154  # = (7 - 3 * sqrt(5)) / 4
    C1 = 0.118033988749894848204586834366  # = (sqrt(5) - 2) / 2
    C2 = 0.190983005625052575897706582817  # = (3 - sqrt(5)) / 4
    C3 = 0.381966011250105151795413165634  # = (3 - sqrt(5)) / 2
    C4 = 0.427050983124842272306880251548  # = (3 * sqrt(5) - 5) / 4
    C5 = 0.618033988749894848204586834366  # = (sqrt(5) - 1) / 2
    C6 = 0.690983005625052575897706582817  # = (5 - sqrt(5)) / 4
    C7 = 0.736067977499789696409173668731  # = (2 * sqrt(5) - 3) / 2
    C8 = 0.881966011250105151795413165634  # = (4 - sqrt(5)) / 2
    C9 = 0.927050983124842272306880251548  # = 3 * (sqrt(5) - 1) / 4

    V0 = [0.5, 0.5, -C7]
    V1 = [0.5, 0.5, C7]
    V2 = [-0.5, 0.5, -C7]
    V3 = [-0.5, 0.5, C7]
    V4 = [0.5, -0.5, -C7]
    V5 = [0.5, -0.5, C7]
    V6 = [-0.5, -0.5, -C7]
    V7 = [-0.5, -0.5, C7]
    V8 = [0.5, -C7, 0.5]
    V9 = [0.5, -C7, -0.5]
    V10 = [-0.5, -C7, 0.5]
    V11 = [-0.5, -C7, -0.5]
    V12 = [0.5, C7, 0.5]
    V13 = [0.5, C7, -0.5]
    V14 = [-0.5, C7, 0.5]
    V15 = [-0.5, C7, -0.5]
    V16 = [-C7, 0.5, 0.5]
    V17 = [-C7, 0.5, -0.5]
    V18 = [C7, 0.5, 0.5]
    V19 = [C7, 0.5, -0.5]
    V20 = [-C7, -0.5, 0.5]
    V21 = [-C7, -0.5, -0.5]
    V22 = [C7, -0.5, 0.5]
    V23 = [C7, -0.5, -0.5]
    V24 = [C2, 1.0, C0]
    V25 = [C2, 1.0, -C0]
    V26 = [-C2, 1.0, C0]
    V27 = [-C2, 1.0, -C0]
    V28 = [C2, -1.0, C0]
    V29 = [C2, -1.0, -C0]
    V30 = [-C2, -1.0, C0]
    V31 = [-C2, -1.0, -C0]
    V32 = [1.0, C0, C2]
    V33 = [1.0, C0, -C2]
    V34 = [-1.0, C0, C2]
    V35 = [-1.0, C0, -C2]
    V36 = [1.0, -C0, C2]
    V37 = [1.0, -C0, -C2]
    V38 = [-1.0, -C0, C2]
    V39 = [-1.0, -C0, -C2]
    V40 = [C0, C2, 1.0]
    V41 = [C0, C2, -1.0]
    V42 = [-C0, C2, 1.0]
    V43 = [-C0, C2, -1.0]
    V44 = [C0, -C2, 1.0]
    V45 = [C0, -C2, -1.0]
    V46 = [-C0, -C2, 1.0]
    V47 = [-C0, -C2, -1.0]
    V48 = [-C1, 0.5, C8]
    V49 = [-C1, 0.5, -C8]
    V50 = [C1, 0.5, C8]
    V51 = [C1, 0.5, -C8]
    V52 = [-C1, -0.5, C8]
    V53 = [-C1, -0.5, -C8]
    V54 = [C1, -0.5, C8]
    V55 = [C1, -0.5, -C8]
    V56 = [0.5, C8, -C1]
    V57 = [0.5, C8, C1]
    V58 = [-0.5, C8, -C1]
    V59 = [-0.5, C8, C1]
    V60 = [0.5, -C8, -C1]
    V61 = [0.5, -C8, C1]
    V62 = [-0.5, -C8, -C1]
    V63 = [-0.5, -C8, C1]
    V64 = [C8, -C1, 0.5]
    V65 = [C8, -C1, -0.5]
    V66 = [-C8, -C1, 0.5]
    V67 = [-C8, -C1, -0.5]
    V68 = [C8, C1, 0.5]
    V69 = [C8, C1, -0.5]
    V70 = [-C8, C1, 0.5]
    V71 = [-C8, C1, -0.5]
    V72 = [-C5, C6, -C4]
    V73 = [-C5, C6, C4]
    V74 = [C5, C6, -C4]
    V75 = [C5, C6, C4]
    V76 = [-C5, -C6, -C4]
    V77 = [-C5, -C6, C4]
    V78 = [C5, -C6, -C4]
    V79 = [C5, -C6, C4]
    V80 = [C6, -C4, -C5]
    V81 = [C6, -C4, C5]
    V82 = [-C6, -C4, -C5]
    V83 = [-C6, -C4, C5]
    V84 = [C6, C4, -C5]
    V85 = [C6, C4, C5]
    V86 = [-C6, C4, -C5]
    V87 = [-C6, C4, C5]
    V88 = [-C4, -C5, C6]
    V89 = [-C4, -C5, -C6]
    V90 = [C4, -C5, C6]
    V91 = [C4, -C5, -C6]
    V92 = [-C4, C5, C6]
    V93 = [-C4, C5, -C6]
    V94 = [C4, C5, C6]
    V95 = [C4, C5, -C6]
    V96 = [-C9, C2, C3]
    V97 = [-C9, C2, -C3]
    V98 = [C9, C2, C3]
    V99 = [C9, C2, -C3]
    V100 = [-C9, -C2, C3]
    V101 = [-C9, -C2, -C3]
    V102 = [C9, -C2, C3]
    V103 = [C9, -C2, -C3]
    V104 = [C2, C3, -C9]
    V105 = [C2, C3, C9]
    V106 = [-C2, C3, -C9]
    V107 = [-C2, C3, C9]
    V108 = [C2, -C3, -C9]
    V109 = [C2, -C3, C9]
    V110 = [-C2, -C3, -C9]
    V111 = [-C2, -C3, C9]
    V112 = [C3, -C9, C2]
    V113 = [C3, -C9, -C2]
    V114 = [-C3, -C9, C2]
    V115 = [-C3, -C9, -C2]
    V116 = [C3, C9, C2]
    V117 = [C3, C9, -C2]
    V118 = [-C3, C9, C2]
    V119 = [-C3, C9, -C2]

    # Faces:
    decagram = np.zeros((12, 10, 3))
    decagram[0] = [V0, V2, V26, V74, V106, V58, V56, V104, V72, V24]
    decagram[1] = [V1, V25, V73, V105, V57, V59, V107, V75, V27, V3]
    decagram[2] = [V4, V28, V76, V108, V60, V62, V110, V78, V30, V6]
    decagram[3] = [V5, V7, V31, V79, V111, V63, V61, V109, V77, V29]
    decagram[4] = [V8, V9, V33, V81, V113, V65, V64, V112, V80, V32]
    decagram[5] = [V10, V34, V82, V114, V66, V67, V115, V83, V35, V11]
    decagram[6] = [V12, V36, V84, V116, V68, V69, V117, V85, V37, V13]
    decagram[7] = [V14, V15, V39, V87, V119, V71, V70, V118, V86, V38]
    decagram[8] = [V16, V20, V44, V92, V100, V52, V48, V96, V88, V40]
    decagram[9] = [V17, V41, V89, V97, V49, V53, V101, V93, V45, V21]
    decagram[10] = [V18, V42, V90, V98, V50, V54, V102, V94, V46, V22]
    decagram[11] = [V19, V23, V47, V95, V103, V55, V51, V99, V91, V43]

    hexagon = np.zeros((20, 6, 3))
    hexagon[0] = [V0, V24, V48, V52, V28, V4]
    hexagon[1] = [V1, V5, V29, V53, V49, V25]
    hexagon[2] = [V2, V6, V30, V54, V50, V26]
    hexagon[3] = [V3, V27, V51, V55, V31, V7]
    hexagon[4] = [V8, V32, V56, V58, V34, V10]
    hexagon[5] = [V9, V11, V35, V59, V57, V33]
    hexagon[6] = [V12, V14, V38, V62, V60, V36]
    hexagon[7] = [V13, V37, V61, V63, V39, V15]
    hexagon[8] = [V16, V40, V64, V65, V41, V17]
    hexagon[9] = [V18, V19, V43, V67, V66, V42]
    hexagon[10] = [V20, V21, V45, V69, V68, V44]
    hexagon[11] = [V22, V46, V70, V71, V47, V23]
    hexagon[12] = [V72, V104, V80, V112, V88, V96]
    hexagon[13] = [V73, V97, V89, V113, V81, V105]
    hexagon[14] = [V74, V98, V90, V114, V82, V106]
    hexagon[15] = [V75, V107, V83, V115, V91, V99]
    hexagon[16] = [V76, V100, V92, V116, V84, V108]
    hexagon[17] = [V77, V109, V85, V117, V93, V101]
    hexagon[18] = [V78, V110, V86, V118, V94, V102]
    hexagon[19] = [V79, V103, V95, V119, V87, V111]

    square = np.zeros((30, 4, 3))
    square[0] = [V0, V4, V6, V2]
    square[1] = [V1, V3, V7, V5]
    square[2] = [V8, V10, V11, V9]
    square[3] = [V12, V13, V15, V14]
    square[4] = [V16, V17, V21, V20]
    square[5] = [V18, V22, V23, V19]
    square[6] = [V24, V72, V96, V48]
    square[7] = [V25, V49, V97, V73]
    square[8] = [V26, V50, V98, V74]
    square[9] = [V27, V75, V99, V51]
    square[10] = [V28, V52, V100, V76]
    square[11] = [V29, V77, V101, V53]
    square[12] = [V30, V78, V102, V54]
    square[13] = [V31, V55, V103, V79]
    square[14] = [V32, V80, V104, V56]
    square[15] = [V33, V57, V105, V81]
    square[16] = [V34, V58, V106, V82]
    square[17] = [V35, V83, V107, V59]
    square[18] = [V36, V60, V108, V84]
    square[19] = [V37, V85, V109, V61]
    square[20] = [V38, V86, V110, V62]
    square[21] = [V39, V63, V111, V87]
    square[22] = [V40, V88, V112, V64]
    square[23] = [V41, V65, V113, V89]
    square[24] = [V42, V66, V114, V90]
    square[25] = [V43, V91, V115, V67]
    square[26] = [V44, V68, V116, V92]
    square[27] = [V45, V93, V117, V69]
    square[28] = [V46, V94, V118, V70]
    square[29] = [V47, V71, V119, V95]

    face = [square, hexagon, decagram]
    return face


def did():
    # Dodecadodecahedron

    C0 = 0.309016994374947424102293417183  # = (sqrt(5) - 1) / 4
    C1 = 0.809016994374947424102293417183  # = (1 + sqrt(5)) / 4

    V0 = [0.0, 0.0, 1.0]
    V1 = [0.0, 0.0, -1.0]
    V2 = [1.0, 0.0, 0.0]
    V3 = [-1.0, 0.0, 0.0]
    V4 = [0.0, 1.0, 0.0]
    V5 = [0.0, -1.0, 0.0]
    V6 = [C0, 0.5, C1]
    V7 = [C0, 0.5, -C1]
    V8 = [C0, -0.5, C1]
    V9 = [C0, -0.5, -C1]
    V10 = [-C0, 0.5, C1]
    V11 = [-C0, 0.5, -C1]
    V12 = [-C0, -0.5, C1]
    V13 = [-C0, -0.5, -C1]
    V14 = [C1, C0, 0.5]
    V15 = [C1, C0, -0.5]
    V16 = [C1, -C0, 0.5]
    V17 = [C1, -C0, -0.5]
    V18 = [-C1, C0, 0.5]
    V19 = [-C1, C0, -0.5]
    V20 = [-C1, -C0, 0.5]
    V21 = [-C1, -C0, -0.5]
    V22 = [0.5, C1, C0]
    V23 = [0.5, C1, -C0]
    V24 = [0.5, -C1, C0]
    V25 = [0.5, -C1, -C0]
    V26 = [-0.5, C1, C0]
    V27 = [-0.5, C1, -C0]
    V28 = [-0.5, -C1, C0]
    V29 = [-0.5, -C1, -C0]

    # Faces:
    pentagon = np.zeros((12, 5, 3))
    pentagram = np.zeros((12, 5, 3))
    pentagon[0] = [V0, V14, V23, V27, V18]
    pentagram[0] = [V0, V18, V12, V10, V20]
    pentagon[1] = [V0, V20, V29, V25, V16]
    pentagram[1] = [V0, V16, V6, V8, V14]
    pentagon[2] = [V1, V17, V24, V28, V21]
    pentagram[2] = [V1, V21, V11, V13, V19]
    pentagon[3] = [V1, V19, V26, V22, V15]
    pentagram[3] = [V1, V15, V9, V7, V17]
    pentagon[4] = [V2, V22, V10, V12, V24]
    pentagram[4] = [V2, V24, V17, V16, V25]
    pentagon[5] = [V2, V25, V13, V11, V23]
    pentagram[5] = [V2, V23, V14, V15, V22]
    pentagon[6] = [V3, V27, V7, V9, V29]
    pentagram[6] = [V3, V29, V20, V21, V28]
    pentagon[7] = [V3, V28, V8, V6, V26]
    pentagram[7] = [V3, V26, V19, V18, V27]
    pentagon[8] = [V4, V6, V16, V17, V7]
    pentagram[8] = [V4, V7, V27, V23, V11]
    pentagon[9] = [V4, V11, V21, V20, V10]
    pentagram[9] = [V4, V10, V22, V26, V6]
    pentagon[10] = [V5, V8, V28, V24, V12]
    pentagram[10] = [V5, V12, V18, V19, V13]
    pentagon[11] = [V5, V13, V25, V29, V9]
    pentagram[11] = [V5, V9, V15, V14, V8]

    face = [pentagon, pentagram]
    return face


def seside():
    # Small Snub Icosicosidodecahedron

    C0 = 0.267843693395936526330702957199  # (1 - sqrt(5) + sqrt(2 * (3 * sqrt(5) - 1))) / 8
    C1 = 0.309016994374947424102293417183  # (sqrt(5) - 1) / 4
    C2 = 0.576860687770883950432996374382  # (sqrt(5) - 1 + sqrt(2 * (3 * sqrt(5) - 1))) / 8
    C3 = 0.933380199586931046495436031247  # (1 + sqrt(3 + 2 * sqrt(5))) / 4
    C4 = 1.07686068777088395043299637438  # (3 + sqrt(5) + sqrt(2 * (3 * sqrt(5) - 1))) / 8
    C5 = 1.24239719396187847059772944843  # (sqrt(5) + sqrt(3 + 2 * sqrt(5))) / 4
    C6 = 1.433380199586931046495436031247  # (3 + sqrt(3 + 2 * sqrt(5))) / 4

    V0  = (  C0,  0.0,   C6)
    V1  = (  C0,  0.0,  -C6)
    V2  = ( -C0,  0.0,   C6)
    V3  = ( -C0,  0.0,  -C6)
    V4  = (  C6,   C0,  0.0)
    V5  = (  C6,  -C0,  0.0)
    V6  = ( -C6,   C0,  0.0)
    V7  = ( -C6,  -C0,  0.0)
    V8  = ( 0.0,   C6,   C0)
    V9  = ( 0.0,   C6,  -C0)
    V10 = ( 0.0,  -C6,   C0)
    V11 = ( 0.0,  -C6,  -C0)
    V12 = (  C2,  0.5,   C5)
    V13 = (  C2,  0.5,  -C5)
    V14 = (  C2, -0.5,   C5)
    V15 = (  C2, -0.5,  -C5)
    V16 = ( -C2,  0.5,   C5)
    V17 = ( -C2,  0.5,  -C5)
    V18 = ( -C2, -0.5,   C5)
    V19 = ( -C2, -0.5,  -C5)
    V20 = (  C5,   C2,  0.5)
    V21 = (  C5,   C2, -0.5)
    V22 = (  C5,  -C2,  0.5)
    V23 = (  C5,  -C2, -0.5)
    V24 = ( -C5,   C2,  0.5)
    V25 = ( -C5,   C2, -0.5)
    V26 = ( -C5,  -C2,  0.5)
    V27 = ( -C5,  -C2, -0.5)
    V28 = ( 0.5,   C5,   C2)
    V29 = ( 0.5,   C5,  -C2)
    V30 = ( 0.5,  -C5,   C2)
    V31 = ( 0.5,  -C5,  -C2)
    V32 = (-0.5,   C5,   C2)
    V33 = (-0.5,   C5,  -C2)
    V34 = (-0.5,  -C5,   C2)
    V35 = (-0.5,  -C5,  -C2)
    V36 = (  C1,   C3,   C4)
    V37 = (  C1,   C3,  -C4)
    V38 = (  C1,  -C3,   C4)
    V39 = (  C1,  -C3,  -C4)
    V40 = ( -C1,   C3,   C4)
    V41 = ( -C1,   C3,  -C4)
    V42 = ( -C1,  -C3,   C4)
    V43 = ( -C1,  -C3,  -C4)
    V44 = (  C4,   C1,   C3)
    V45 = (  C4,   C1,  -C3)
    V46 = (  C4,  -C1,   C3)
    V47 = (  C4,  -C1,  -C3)
    V48 = ( -C4,   C1,   C3)
    V49 = ( -C4,   C1,  -C3)
    V50 = ( -C4,  -C1,   C3)
    V51 = ( -C4,  -C1,  -C3)
    V52 = (  C3,   C4,   C1)
    V53 = (  C3,   C4,  -C1)
    V54 = (  C3,  -C4,   C1)
    V55 = (  C3,  -C4,  -C1)
    V56 = ( -C3,   C4,   C1)
    V57 = ( -C3,   C4,  -C1)
    V58 = ( -C3,  -C4,   C1)
    V59 = ( -C3,  -C4,  -C1)

    # Faces:
    pentagram = np.zeros((12, 5, 3))

    pentagram[0] = [V0, V46, V12, V14, V44]
    pentagram[1] = [V1, V45, V15, V13, V47]
    pentagram[2] = [V2, V48, V18, V16, V50]
    pentagram[3] = [V3, V51, V17, V19, V49]
    pentagram[4] = [V4, V53, V20, V21, V52]
    pentagram[5] = [V5, V54, V23, V22, V55]
    pentagram[6] = [V6, V56, V25, V24, V57]
    pentagram[7] = [V7, V59, V26, V27, V58]
    pentagram[8] = [V8, V40, V28, V32, V36]
    pentagram[9] = [V9, V37, V33, V29, V41]
    pentagram[10] = [V10, V38, V34, V30, V42]
    pentagram[11] = [V11, V43, V31, V35, V39]

    triangle = np.zeros((100, 3, 3))

    triangle[0] = [V0, V16, V18]
    triangle[1] = [V1, V19, V17]
    triangle[2] = [V2, V14, V12]
    triangle[3] = [V3, V13, V15]
    triangle[4] = [V4, V22, V23]
    triangle[5] = [V5, V21, V20]
    triangle[6] = [V6, V27, V26]
    triangle[7] = [V7, V24, V25]
    triangle[8] = [V8, V29, V33]
    triangle[9] = [V9, V32, V28]
    triangle[10] = [V10, V35, V31]
    triangle[11] = [V11, V30, V34]
    triangle[12] = [V12, V28, V40]
    triangle[13] = [V13, V41, V29]
    triangle[14] = [V14, V42, V30]
    triangle[15] = [V15, V31, V43]
    triangle[16] = [V16, V36, V32]
    triangle[17] = [V17, V33, V37]
    triangle[18] = [V18, V34, V38]
    triangle[19] = [V19, V39, V35]
    triangle[20] = [V20, V12, V46]
    triangle[21] = [V21, V47, V13]
    triangle[22] = [V22, V44, V14]
    triangle[23] = [V23, V15, V45]
    triangle[24] = [V24, V50, V16]
    triangle[25] = [V25, V17, V51]
    triangle[26] = [V26, V18, V48]
    triangle[27] = [V27, V49, V19]
    triangle[28] = [V28, V20, V53]
    triangle[29] = [V29, V52, V21]
    triangle[30] = [V30, V55, V22]
    triangle[31] = [V31, V23, V54]
    triangle[32] = [V32, V57, V24]
    triangle[33] = [V33, V25, V56]
    triangle[34] = [V34, V26, V59]
    triangle[35] = [V35, V58, V27]
    triangle[36] = [V36, V0, V44]
    triangle[37] = [V37, V45, V1]
    triangle[38] = [V38, V46, V0]
    triangle[39] = [V39, V1, V47]
    triangle[40] = [V40, V48, V2]
    triangle[41] = [V41, V3, V49]
    triangle[42] = [V42, V2, V50]
    triangle[43] = [V43, V51, V3]
    triangle[44] = [V44, V4, V52]
    triangle[45] = [V45, V53, V4]
    triangle[46] = [V46, V54, V5]
    triangle[47] = [V47, V5, V55]
    triangle[48] = [V48, V56, V6]
    triangle[49] = [V49, V6, V57]
    triangle[50] = [V50, V7, V58]
    triangle[51] = [V51, V59, V7]
    triangle[52] = [V52, V8, V36]
    triangle[53] = [V53, V37, V9]
    triangle[54] = [V54, V38, V10]
    triangle[55] = [V55, V11, V39]
    triangle[56] = [V56, V40, V8]
    triangle[57] = [V57, V9, V41]
    triangle[58] = [V58, V10, V42]
    triangle[59] = [V59, V43, V11]
    triangle[60] = [V0, V18, V38]
    triangle[61] = [V0, V36, V16]
    triangle[62] = [V1, V17, V37]
    triangle[63] = [V1, V39, V19]
    triangle[64] = [V2, V12, V40]
    triangle[65] = [V2, V42, V14]
    triangle[66] = [V3, V15, V43]
    triangle[67] = [V3, V41, V13]
    triangle[68] = [V21, V5, V47]
    triangle[69] = [V21, V13, V29]
    triangle[70] = [V22, V4, V44]
    triangle[71] = [V22, V14, V30]
    triangle[72] = [V25, V33, V17]
    triangle[73] = [V25, V51, V7]
    triangle[74] = [V26, V34, V18]
    triangle[75] = [V26, V48, V6]
    triangle[76] = [V28, V12, V20]
    triangle[77] = [V28, V53, V9]
    triangle[78] = [V31, V15, V23]
    triangle[79] = [V31, V54, V10]
    triangle[80] = [V32, V9, V57]
    triangle[81] = [V32, V24, V16]
    triangle[82] = [V35, V10, V58]
    triangle[83] = [V35, V27, V19]
    triangle[84] = [V45, V4, V23]
    triangle[85] = [V45, V37, V53]
    triangle[86] = [V46, V5, V20]
    triangle[87] = [V46, V38, V54]
    triangle[88] = [V49, V27, V6]
    triangle[89] = [V49, V57, V41]
    triangle[90] = [V50, V24, V7]
    triangle[91] = [V50, V58, V42]
    triangle[92] = [V52, V29, V8]
    triangle[93] = [V52, V36, V44]
    triangle[94] = [V55, V30, V11]
    triangle[95] = [V55, V39, V47]
    triangle[96] = [V56, V8, V33]
    triangle[97] = [V56, V48, V40]
    triangle[98] = [V59, V11, V34]
    triangle[99] = [V59, V51, V43]

    face = [triangle, pentagram]
    return face


def siddid():
    # Snub Dodecadodecahedron

    C0 = 0.109916902433172651090492403707
    C1 = 0.201581385528028781981346763340
    C2 = 0.2132629972423431530340912974046
    C3 = 0.311498287961201433071839167047
    C4 = 0.391112281317322520035815656719
    C5 = 0.4549836805139589684034395850047
    C6 = 0.522916062155765684314671540611
    C7 = 0.656565066041987750384786348344
    C8 = 0.717277814600969258425288142552
    C9 = 0.834414350116967117386510707658
    C10 = 0.849081595439412422704144026444
    C11 = 0.958998497872585073794636430152
    C12 = 1.04767734735931027042060200506
    C13 = 1.17226149511492822682872772756
    C14 = 1.24019387675673494273995968316

    V0 = (C1, -C2, C14)
    V1 = (C1, C2, -C14)
    V2 = (-C1, C2, C14)
    V3 = (-C1, -C2, -C14)
    V4 = (C14, -C1, C2)
    V5 = (C14, C1, -C2)
    V6 = (-C14, C1, C2)
    V7 = (-C14, -C1, -C2)
    V8 = (C2, -C14, C1)
    V9 = (C2, C14, -C1)
    V10 = (-C2, C14, C1)
    V11 = (-C2, -C14, -C1)
    V12 = (C3, C4, C13)
    V13 = (C3, -C4, -C13)
    V14 = (-C3, -C4, C13)
    V15 = (-C3, C4, -C13)
    V16 = (C13, C3, C4)
    V17 = (C13, -C3, -C4)
    V18 = (-C13, -C3, C4)
    V19 = (-C13, C3, -C4)
    V20 = (C4, C13, C3)
    V21 = (C4, -C13, -C3)
    V22 = (-C4, -C13, C3)
    V23 = (-C4, C13, -C3)
    V24 = (C0, -C8, C12)
    V25 = (C0, C8, -C12)
    V26 = (-C0, C8, C12)
    V27 = (-C0, -C8, -C12)
    V28 = (C12, -C0, C8)
    V29 = (C12, C0, -C8)
    V30 = (-C12, C0, C8)
    V31 = (-C12, -C0, -C8)
    V32 = (C8, -C12, C0)
    V33 = (C8, C12, -C0)
    V34 = (-C8, C12, C0)
    V35 = (-C8, -C12, -C0)
    V36 = (C7, -C6, C11)
    V37 = (C7, C6, -C11)
    V38 = (-C7, C6, C11)
    V39 = (-C7, -C6, -C11)
    V40 = (C11, -C7, C6)
    V41 = (C11, C7, -C6)
    V42 = (-C11, C7, C6)
    V43 = (-C11, -C7, -C6)
    V44 = (C6, -C11, C7)
    V45 = (C6, C11, -C7)
    V46 = (-C6, C11, C7)
    V47 = (-C6, -C11, -C7)
    V48 = (C9, C5, C10)
    V49 = (C9, -C5, -C10)
    V50 = (-C9, -C5, C10)
    V51 = (-C9, C5, -C10)
    V52 = (C10, C9, C5)
    V53 = (C10, -C9, -C5)
    V54 = (-C10, -C9, C5)
    V55 = (-C10, C9, -C5)
    V56 = (C5, C10, C9)
    V57 = (C5, -C10, -C9)
    V58 = (-C5, -C10, C9)
    V59 = (-C5, C10, -C9)

    # Faces:
    pentagram = np.zeros((12, 5, 3))

    pentagram[0] = [V0, V28, V12, V36, V48]
    pentagram[1] = [V1, V29, V13, V37, V49]
    pentagram[2] = [V2, V30, V14, V38, V50]
    pentagram[3] = [V3, V31, V15, V39, V51]
    pentagram[4] = [V4, V32, V17, V40, V53]
    pentagram[5] = [V5, V33, V16, V41, V52]
    pentagram[6] = [V6, V34, V19, V42, V55]
    pentagram[7] = [V7, V35, V18, V43, V54]
    pentagram[8] = [V8, V24, V22, V44, V58]
    pentagram[9] = [V9, V25, V23, V45, V59]
    pentagram[10] = [V10, V26, V20, V46, V56]
    pentagram[11] = [V11, V27, V21, V47, V57]

    pentagon = np.zeros((12, 5, 3))

    pentagon[0] = [V0, V26, V42, V18, V58]
    pentagon[1] = [V1, V27, V43, V19, V59]
    pentagon[2] = [V2, V24, V40, V16, V56]
    pentagon[3] = [V3, V25, V41, V17, V57]
    pentagon[4] = [V4, V29, V45, V20, V48]
    pentagon[5] = [V5, V28, V44, V21, V49]
    pentagon[6] = [V6, V31, V47, V22, V50]
    pentagon[7] = [V7, V30, V46, V23, V51]
    pentagon[8] = [V8, V35, V39, V13, V53]
    pentagon[9] = [V9, V34, V38, V12, V52]
    pentagon[10] = [V10, V33, V37, V15, V55]
    pentagon[11] = [V11, V32, V36, V14, V54]

    triangle = np.zeros((60, 3, 3))

    triangle[0] = [V0, V58, V44]
    triangle[1] = [V1, V59, V45]
    triangle[2] = [V2, V56, V46]
    triangle[3] = [V3, V57, V47]
    triangle[4] = [V4, V48, V36]
    triangle[5] = [V5, V49, V37]
    triangle[6] = [V6, V50, V38]
    triangle[7] = [V7, V51, V39]
    triangle[8] = [V8, V53, V40]
    triangle[9] = [V9, V52, V41]
    triangle[10] = [V10, V55, V42]
    triangle[11] = [V11, V54, V43]
    triangle[12] = [V12, V38, V14]
    triangle[13] = [V13, V39, V15]
    triangle[14] = [V14, V36, V12]
    triangle[15] = [V15, V37, V13]
    triangle[16] = [V16, V40, V17]
    triangle[17] = [V17, V41, V16]
    triangle[18] = [V18, V42, V19]
    triangle[19] = [V19, V43, V18]
    triangle[20] = [V20, V45, V23]
    triangle[21] = [V21, V44, V22]
    triangle[22] = [V22, V47, V21]
    triangle[23] = [V23, V46, V20]
    triangle[24] = [V24, V2, V50]
    triangle[25] = [V25, V3, V51]
    triangle[26] = [V26, V0, V48]
    triangle[27] = [V27, V1, V49]
    triangle[28] = [V28, V5, V52]
    triangle[29] = [V29, V4, V53]
    triangle[30] = [V30, V7, V54]
    triangle[31] = [V31, V6, V55]
    triangle[32] = [V32, V11, V57]
    triangle[33] = [V33, V10, V56]
    triangle[34] = [V34, V9, V59]
    triangle[35] = [V35, V8, V58]
    triangle[36] = [V36, V32, V4]
    triangle[37] = [V37, V33, V5]
    triangle[38] = [V38, V34, V6]
    triangle[39] = [V39, V35, V7]
    triangle[40] = [V40, V24, V8]
    triangle[41] = [V41, V25, V9]
    triangle[42] = [V42, V26, V10]
    triangle[43] = [V43, V27, V11]
    triangle[44] = [V44, V28, V0]
    triangle[45] = [V45, V29, V1]
    triangle[46] = [V46, V30, V2]
    triangle[47] = [V47, V31, V3]
    triangle[48] = [V48, V20, V26]
    triangle[49] = [V49, V21, V27]
    triangle[50] = [V50, V22, V24]
    triangle[51] = [V51, V23, V25]
    triangle[52] = [V52, V12, V28]
    triangle[53] = [V53, V13, V29]
    triangle[54] = [V54, V14, V30]
    triangle[55] = [V55, V15, V31]
    triangle[56] = [V56, V16, V33]
    triangle[57] = [V57, V17, V32]
    triangle[58] = [V58, V18, V35]
    triangle[59] = [V59, V19, V34]
    # vert = datagenerator.vertices
    # fcs = datagenerator.faces
    # triangle = fcs[0]
    # pentagon = fcs[2]
    # pentagram = fcs[6]
    face = [triangle, pentagon, pentagram]
    return face


def qrid():
    # Uniform Great Rhombicosidodecahedron
    C0 = 0.118033988749894848204586834366  # = (sqrt(5) - 2) / 2
    C1 = 0.190983005625052575897706582817  # = (3 - sqrt(5)) / 4
    C2 = 0.309016994374947424102293417183  # = (sqrt(5) - 1) / 4
    C3 = 0.618033988749894848204586834366  # = (sqrt(5) - 1) / 2
    C4 = 0.690983005625052575897706582817  # = (5 - sqrt(5)) / 4

    V0  = ( 0.5,  0.5,  -C0)
    V1  = ( 0.5,  0.5,   C0)
    V2  = (-0.5,  0.5,  -C0)
    V3  = (-0.5,  0.5,   C0)
    V4  = ( 0.5, -0.5,  -C0)
    V5  = ( 0.5, -0.5,   C0)
    V6  = (-0.5, -0.5,  -C0)
    V7  = (-0.5, -0.5,   C0)
    V8  = ( 0.5,  -C0,  0.5)
    V9  = ( 0.5,  -C0, -0.5)
    V10 = (-0.5,  -C0,  0.5)
    V11 = (-0.5,  -C0, -0.5)
    V12 = ( 0.5,   C0,  0.5)
    V13 = ( 0.5,   C0, -0.5)
    V14 = (-0.5,   C0,  0.5)
    V15 = (-0.5,   C0, -0.5)
    V16 = ( -C0,  0.5,  0.5)
    V17 = ( -C0,  0.5, -0.5)
    V18 = (  C0,  0.5,  0.5)
    V19 = (  C0,  0.5, -0.5)
    V20 = ( -C0, -0.5,  0.5)
    V21 = ( -C0, -0.5, -0.5)
    V22 = (  C0, -0.5,  0.5)
    V23 = (  C0, -0.5, -0.5)
    V24 = (  C1,  0.0,   C4)
    V25 = (  C1,  0.0,  -C4)
    V26 = ( -C1,  0.0,   C4)
    V27 = ( -C1,  0.0,  -C4)
    V28 = ( 0.0,   C4,   C1)
    V29 = ( 0.0,   C4,  -C1)
    V30 = ( 0.0,  -C4,   C1)
    V31 = ( 0.0,  -C4,  -C1)
    V32 = (  C4,   C1,  0.0)
    V33 = ( -C4,   C1,  0.0)
    V34 = (  C4,  -C1,  0.0)
    V35 = ( -C4,  -C1,  0.0)
    V36 = ( -C2,   C1,  -C3)
    V37 = ( -C2,   C1,   C3)
    V38 = (  C2,   C1,  -C3)
    V39 = (  C2,   C1,   C3)
    V40 = ( -C2,  -C1,  -C3)
    V41 = ( -C2,  -C1,   C3)
    V42 = (  C2,  -C1,  -C3)
    V43 = (  C2,  -C1,   C3)
    V44 = (  C1,  -C3,  -C2)
    V45 = (  C1,  -C3,   C2)
    V46 = ( -C1,  -C3,  -C2)
    V47 = ( -C1,  -C3,   C2)
    V48 = (  C1,   C3,  -C2)
    V49 = (  C1,   C3,   C2)
    V50 = ( -C1,   C3,  -C2)
    V51 = ( -C1,   C3,   C2)
    V52 = ( -C3,  -C2,   C1)
    V53 = ( -C3,  -C2,  -C1)
    V54 = (  C3,  -C2,   C1)
    V55 = (  C3,  -C2,  -C1)
    V56 = ( -C3,   C2,   C1)
    V57 = ( -C3,   C2,  -C1)
    V58 = (  C3,   C2,   C1)
    V59 = (  C3,   C2,  -C1)

    # Faces:

    pentagram = np.zeros((12, 5, 3))
    pentagram[0] = [V24, V52, V16, V20, V56]
    pentagram[1] = [V25, V57, V21, V17, V53]
    pentagram[2] = [V26, V58, V22, V18, V54]
    pentagram[3] = [V27, V55, V19, V23, V59]
    pentagram[4] = [V28, V36, V0, V2, V38]
    pentagram[5] = [V29, V39, V3, V1, V37]
    pentagram[6] = [V30, V42, V6, V4, V40]
    pentagram[7] = [V31, V41, V5, V7, V43]
    pentagram[8] = [V32, V44, V8, V9, V45]
    pentagram[9] = [V33, V47, V11, V10, V46]
    pentagram[10] = [V34, V49, V13, V12, V48]
    pentagram[11] = [V35, V50, V14, V15, V51]

    square = np.zeros((30, 4, 3))
    square[0] = [V0, V36, V52, V24]
    square[1] = [V1, V25, V53, V37]
    square[2] = [V2, V26, V54, V38]
    square[3] = [V3, V39, V55, V27]
    square[4] = [V4, V24, V56, V40]
    square[5] = [V5, V41, V57, V25]
    square[6] = [V6, V42, V58, V26]
    square[7] = [V7, V27, V59, V43]
    square[8] = [V8, V44, V36, V28]
    square[9] = [V9, V29, V37, V45]
    square[10] = [V10, V28, V38, V46]
    square[11] = [V11, V47, V39, V29]
    square[12] = [V12, V30, V40, V48]
    square[13] = [V13, V49, V41, V31]
    square[14] = [V14, V50, V42, V30]
    square[15] = [V15, V31, V43, V51]
    square[16] = [V16, V52, V44, V32]
    square[17] = [V17, V32, V45, V53]
    square[18] = [V18, V33, V46, V54]
    square[19] = [V19, V55, V47, V33]
    square[20] = [V20, V34, V48, V56]
    square[21] = [V21, V57, V49, V34]
    square[22] = [V22, V58, V50, V35]
    square[23] = [V23, V35, V51, V59]
    square[24] = [V0, V4, V6, V2]
    square[25] = [V1, V3, V7, V5]
    square[26] = [V8, V10, V11, V9]
    square[27] = [V12, V13, V15, V14]
    square[28] = [V16, V17, V21, V20]
    square[29] = [V18, V22, V23, V19]

    triangle = np.zeros((20, 3, 3))
    triangle[0] = [V24, V4, V0]
    triangle[1] = [V25, V1, V5]
    triangle[2] = [V26, V2, V6]
    triangle[3] = [V27, V7, V3]
    triangle[4] = [V28, V10, V8]
    triangle[5] = [V29, V9, V11]
    triangle[6] = [V30, V12, V14]
    triangle[7] = [V31, V15, V13]
    triangle[8] = [V32, V17, V16]
    triangle[9] = [V33, V18, V19]
    triangle[10] = [V34, V20, V21]
    triangle[11] = [V35, V23, V22]
    triangle[12] = [V36, V44, V52]
    triangle[13] = [V37, V53, V45]
    triangle[14] = [V38, V54, V46]
    triangle[15] = [V39, V47, V55]
    triangle[16] = [V40, V56, V48]
    triangle[17] = [V41, V49, V57]
    triangle[18] = [V42, V50, V58]
    triangle[19] = [V43, V59, V51]

    face = [triangle, square, pentagram]
    return face


def girsid():
    #  Great Retrosnub Icosidodecahedron

    C0 = 0.0500355497789497107813240716460
    C1 = 0.0560019989928211678603893479474
    C2 = 0.136961219180949087853660273214
    C3 = 0.140648687587271738919162329994
    C4 = 0.153293050491351512698900732738
    C5 = 0.1715723579964499481311091836148
    C6 = 0.203328600270301223480224804384
    C7 = 0.293941738078623251618063062732
    C8 = 0.374900958266751171611333987999
    C9 = 0.384994585115109604284725376882
    C10 = 0.419605723930610464562174287283
    C11 = 0.430902957259572339471723335946
    C12 = 0.469641273709560175343498358929
    C13 = 0.525643272702381343203887706876
    C14 = 0.556566943111559552415834560497

    V0 = [-C5, C12, C7]
    V1 = [C5, C12, -C7]
    V2 = [C5, -C12, C7]
    V3 = [-C5, -C12, -C7]
    V4 = [C12, C7, -C5]
    V5 = [-C12, C7, C5]
    V6 = [-C12, -C7, -C5]
    V7 = [C12, -C7, C5]
    V8 = [C7, -C5, C12]
    V9 = [-C7, -C5, -C12]
    V10 = [-C7, C5, C12]
    V11 = [C7, C5, -C12]
    V12 = [-C4, -C1, -C14]
    V13 = [C4, -C1, C14]
    V14 = [C4, C1, -C14]
    V15 = [-C4, C1, C14]
    V16 = [C1, -C14, C4]
    V17 = [-C1, -C14, -C4]
    V18 = [-C1, C14, C4]
    V19 = [C1, C14, -C4]
    V20 = [C14, C4, -C1]
    V21 = [-C14, C4, C1]
    V22 = [-C14, -C4, -C1]
    V23 = [C14, -C4, C1]
    V24 = [-C2, -C13, C6]
    V25 = [C2, -C13, -C6]
    V26 = [C2, C13, C6]
    V27 = [-C2, C13, -C6]
    V28 = [-C13, C6, -C2]
    V29 = [C13, C6, C2]
    V30 = [C13, -C6, -C2]
    V31 = [-C13, -C6, C2]
    V32 = [C6, -C2, -C13]
    V33 = [-C6, -C2, C13]
    V34 = [-C6, C2, -C13]
    V35 = [C6, C2, C13]
    V36 = [C11, C0, -C9]
    V37 = [-C11, C0, C9]
    V38 = [-C11, -C0, -C9]
    V39 = [C11, -C0, C9]
    V40 = [C0, -C9, C11]
    V41 = [-C0, -C9, -C11]
    V42 = [-C0, C9, C11]
    V43 = [C0, C9, -C11]
    V44 = [-C9, C11, C0]
    V45 = [C9, C11, -C0]
    V46 = [C9, -C11, C0]
    V47 = [-C9, -C11, -C0]
    V48 = [C10, C8, C3]
    V49 = [-C10, C8, -C3]
    V50 = [-C10, -C8, C3]
    V51 = [C10, -C8, -C3]
    V52 = [-C8, C3, -C10]
    V53 = [C8, C3, C10]
    V54 = [C8, -C3, -C10]
    V55 = [-C8, -C3, C10]
    V56 = [-C3, -C10, C8]
    V57 = [C3, -C10, -C8]
    V58 = [C3, C10, C8]
    V59 = [-C3, C10, -C8]

    pentagram = np.zeros((12, 5, 3))

    pentagram[0] = [V0, V36, V28, V48, V12]
    pentagram[1] = [V1, V37, V29, V49, V13]
    pentagram[2] = [V2, V38, V30, V50, V14]
    pentagram[3] = [V3, V39, V31, V51, V15]
    pentagram[4] = [V4, V40, V32, V53, V17]
    pentagram[5] = [V5, V41, V33, V52, V16]
    pentagram[6] = [V6, V42, V34, V55, V19]
    pentagram[7] = [V7, V43, V35, V54, V18]
    pentagram[8] = [V8, V44, V24, V58, V22]
    pentagram[9] = [V9, V45, V25, V59, V23]
    pentagram[10] = [V10, V46, V26, V56, V20]
    pentagram[11] = [V11, V47, V27, V57, V21]

    triangle = np.zeros((80, 3, 3))

    triangle[0] = [V0, V2, V14]
    triangle[1] = [V1, V3, V15]
    triangle[2] = [V2, V0, V12]
    triangle[3] = [V3, V1, V13]
    triangle[4] = [V4, V5, V16]
    triangle[5] = [V5, V4, V17]
    triangle[6] = [V6, V7, V18]
    triangle[7] = [V7, V6, V19]
    triangle[8] = [V8, V11, V21]
    triangle[9] = [V9, V10, V20]
    triangle[10] = [V10, V9, V23]
    triangle[11] = [V11, V8, V22]
    triangle[12] = [V12, V48, V56]
    triangle[13] = [V13, V49, V57]
    triangle[14] = [V14, V50, V58]
    triangle[15] = [V15, V51, V59]
    triangle[16] = [V16, V52, V48]
    triangle[17] = [V17, V53, V49]
    triangle[18] = [V18, V54, V50]
    triangle[19] = [V19, V55, V51]
    triangle[20] = [V20, V56, V52]
    triangle[21] = [V21, V57, V53]
    triangle[22] = [V22, V58, V54]
    triangle[23] = [V23, V59, V55]
    triangle[24] = [V24, V44, V36]
    triangle[25] = [V25, V45, V37]
    triangle[26] = [V26, V46, V38]
    triangle[27] = [V27, V47, V39]
    triangle[28] = [V28, V36, V40]
    triangle[29] = [V29, V37, V41]
    triangle[30] = [V30, V38, V42]
    triangle[31] = [V31, V39, V43]
    triangle[32] = [V32, V40, V44]
    triangle[33] = [V33, V41, V45]
    triangle[34] = [V34, V42, V46]
    triangle[35] = [V35, V43, V47]
    triangle[36] = [V36, V0, V24]
    triangle[37] = [V37, V1, V25]
    triangle[38] = [V38, V2, V26]
    triangle[39] = [V39, V3, V27]
    triangle[40] = [V40, V4, V28]
    triangle[41] = [V41, V5, V29]
    triangle[42] = [V42, V6, V30]
    triangle[43] = [V43, V7, V31]
    triangle[44] = [V44, V8, V32]
    triangle[45] = [V45, V9, V33]
    triangle[46] = [V46, V10, V34]
    triangle[47] = [V47, V11, V35]
    triangle[48] = [V48, V28, V16]
    triangle[49] = [V49, V29, V17]
    triangle[50] = [V50, V30, V18]
    triangle[51] = [V51, V31, V19]
    triangle[52] = [V52, V33, V20]
    triangle[53] = [V53, V32, V21]
    triangle[54] = [V54, V35, V22]
    triangle[55] = [V55, V34, V23]
    triangle[56] = [V56, V26, V12]
    triangle[57] = [V57, V27, V13]
    triangle[58] = [V58, V24, V14]
    triangle[59] = [V59, V25, V15]
    triangle[60] = [V24, V0, V14]
    triangle[61] = [V25, V1, V15]
    triangle[62] = [V26, V2, V12]
    triangle[63] = [V27, V3, V13]
    triangle[64] = [V28, V4, V16]
    triangle[65] = [V29, V5, V17]
    triangle[66] = [V30, V6, V18]
    triangle[67] = [V31, V7, V19]
    triangle[68] = [V32, V8, V21]
    triangle[69] = [V33, V9, V20]
    triangle[70] = [V34, V10, V23]
    triangle[71] = [V35, V11, V22]
    triangle[72] = [V36, V44, V40]
    triangle[73] = [V37, V45, V41]
    triangle[74] = [V38, V46, V42]
    triangle[75] = [V39, V47, V43]
    triangle[76] = [V48, V52, V56]
    triangle[77] = [V49, V53, V57]
    triangle[78] = [V50, V54, V58]
    triangle[79] = [V51, V55, V59]

    face = [triangle, pentagram]
    return face
